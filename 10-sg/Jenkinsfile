pipeline {
    agent { label 'AGENT-1' }
    environment {
        PROJECT = 'EXPENSE'
        COMPONENT = 'BACKEND'
    }
    options { 
        disableConcurrentBuilds() 
        timeout(time: 30, unit: 'MINUTES')
        ansiColor('xterm')
    }
    parameters{
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Pick something')
    }
    stages {
        stage('Init') {
            steps {
                script{
                withAWS(region: 'us-east-1', credentials: 'aws-creds') { //creds need to set in jenkins
                    sh """
                        cd 10-sg
                        terraform init -reconfigure
                        terraform plan
                    """
                }
                }
            }
        }
        stage('Apply') {
            input {
                message "Should we continue?"
                ok "Yes, we should."
            }
            steps {
                script{
                withAWS(region: 'us-east-1', credentials: 'aws-creds') { //creds need to set in jenkins
                    sh """
                        cd 10-sg
                        terraform apply -auto-approve
                    """
                }
                }
            }
        }
        stage('Parallel Stages') {
            when {
                expression { params.ACTION == 'apply' }
            }
            parallel {
                stage('20-bastion') {
                    steps {
                        build job: '20-bastion', parameters: [string(name: 'ACTION', value: 'apply')], propagate: true
                    }
                }
                stage('30-rds') {
                    steps {
                        build job: '30-rds', parameters: [string(name: 'ACTION', value: 'apply')], propagate: true
                    }
                }
                stage('40-eks') {
                    steps {
                        build job: '40-eks', parameters: [string(name: 'ACTION', value: 'apply')], propagate: true
                    }
                }
                stage('50-ecr') {
                    steps {
                        build job: '50-ecr', parameters: [string(name: 'ACTION', value: 'apply')], propagate: true
                    }
                }
            }
        }
        stage('Sequential') {
            stages {
                stage('In Sequential 1') {
                    steps {
                        echo "In Sequential 1"
                    }
                }
                stage('In Sequential 2') {
                    steps {
                        echo "In Sequential 2"
                    }
                }
            }
        }
    }
    post { 
        always { 
            echo 'I will always say Hello again!'
            deleteDir()
        }
        failure { 
            echo 'I will run when pipeline is failed.'
        }
        success { 
            echo 'Pipeline completed successfully.'
        }
    }
}

